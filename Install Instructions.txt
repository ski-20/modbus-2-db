# Install Instructions (EnvironmentFile-based)

# This guide installs the Modbus logger and Web UI under systemd using Gunicorn.
# All paths and the service user are configured in ONE file: /etc/default/plc-logger

# Assumptions:
# - The app runs as a non-root user (e.g., 'ele').
# - Web UI will bind to 0.0.0.0:8080 (LAN). Change to 127.0.0.1:8080 for local-only.


# Step 0 - Prepare system & clone the repo

# 0a) (Fresh machine) Install prerequisites:
#   Debian/Ubuntu:
#     > sudo apt update
#     > sudo apt install -y git python3 python3-venv python3-pip tzdata
#   RHEL/Fedora:
#     > sudo dnf install -y git python3 python3-pip tzdata

# 0b) Choose an app root directory and clone the repo (as your normal user):
#   Pick any path; we'll store it in /etc/default/plc-logger next.
#   Example:
#     > export APP_ROOT="$HOME/plc_logger"
#     > mkdir -p "$APP_ROOT"
#     > cd "$APP_ROOT"
#     > git clone https://github.com/ski-20/modbus-2-db.git modbus-2-db
#     > mkdir -p "$APP_ROOT/data"

# 0c) Create the Python virtualenv & install dependencies:
#     > python3 -m venv "$APP_ROOT/venv"
#     > "$APP_ROOT/venv/bin/python" -m pip install --upgrade pip
#     > "$APP_ROOT/venv/bin/pip" install -r "$APP_ROOT/modbus-2-db/requirements.txt"
#     (If on Python 3.8 and zoneinfo errors appear:)
#     > "$APP_ROOT/venv/bin/pip" install backports.zoneinfo


# Step 1 — Configure /etc/default/plc-logger (single source of truth)

# Create the environment file (EDIT: USERNAME and APP_ROOT to match your setup).

# vv BEGIN FILE vv
# /etc/default/plc-logger
USERNAME=ele

# Base directory for the app; must match where you cloned/created things
APP_ROOT=/home/ele/plc_logger

# Derived paths (usually no need to edit)
REPO=${APP_ROOT}/modbus-2-db
VENV=${APP_ROOT}/venv
DATA=${APP_ROOT}/data

# Gunicorn bind address:
#   0.0.0.0:8080 -> reachable on LAN
#   127.0.0.1:8080 -> local-only access
WEB_BIND=0.0.0.0:8080
# ^^ END FILE ^^

# Make sure the app directories are owned by USERNAME:
#   > sudo chown -R ele:ele /home/ele/plc_logger
#   (replace ele with your user if different)


# Step 2 — Install Logger Service

# Create the unit file: /etc/systemd/system/plc-logger.service
# IMPORTANT: paths/users are pulled from /etc/default/plc-logger

# vv BEGIN FILE vv
[Unit]
Description=PLC Modbus Logger
After=network-online.target
Wants=network-online.target

[Service]
EnvironmentFile=/etc/default/plc-logger
User=%E{USERNAME}
Group=%E{USERNAME}
WorkingDirectory=%E{REPO}
Environment=PYTHONUNBUFFERED=1

# ensure data dir exists before start
ExecStartPre=/usr/bin/mkdir -p %E{DATA}

# launch logger
ExecStart=%E{VENV}/bin/python %E{REPO}/logger.py

Restart=always
RestartSec=5

# basic hardening
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=full
ProtectHome=true
ReadWritePaths=%E{APP_ROOT}

[Install]
WantedBy=multi-user.target
# ^^ END FILE ^^


# Step 3 — Install Web UI system service (Gunicorn)

# Create the unit file: /etc/systemd/system/plc-web.service
# IMPORTANT: WEB_BIND comes from /etc/default/plc-logger (LAN vs local-only)

# vv BEGIN FILE vv
[Unit]
Description=PLC Logger Web UI (Gunicorn)
After=plc-logger.service network-online.target
Wants=plc-logger.service network-online.target

[Service]
EnvironmentFile=/etc/default/plc-logger
User=%E{USERNAME}
Group=%E{USERNAME}
WorkingDirectory=%E{REPO}
Environment=PYTHONUNBUFFERED=1

# Gunicorn: 2 workers, 4 threads each; adjust as needed
ExecStart=%E{VENV}/bin/gunicorn \
  --workers 2 --threads 4 --timeout 120 \
  --bind %E{WEB_BIND} \
  --chdir %E{REPO} \
  'web:create_app()' --factory

Restart=always
RestartSec=5

# basic hardening
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=full
ProtectHome=true
ReadWritePaths=%E{APP_ROOT}

[Install]
WantedBy=multi-user.target
# ^^ END FILE ^^


# Step 4 — Enable & start both services

#   > sudo systemctl daemon-reload
#   > sudo systemctl enable plc-logger.service
#   > sudo systemctl enable plc-web.service
#   > sudo systemctl start plc-logger.service
#   > sudo systemctl start plc-web.service

# If you set WEB_BIND=0.0.0.0:8080 and use a firewall (Ubuntu UFW example):
#   > sudo ufw allow 8080/tcp


# Step 5 — Verification

#   Service status:
#     > sudo systemctl status plc-logger plc-web
#
#   Logs (follow):
#     > sudo journalctl -u plc-logger -f
#     > sudo journalctl -u plc-web -f
#
#   Reach the web UI:
#     - http://<device-ip>:8080/
#     (or http://127.0.0.1:8080/ if WEB_BIND=127.0.0.1:8080)


# Step 6 — Configure the app (one-time check)

# Edit config.py to match your environment (DB root, timezone, caps):
#   > nano "$(grep '^REPO=' /etc/default/plc-logger | cut -d= -f2)/config.py"
#
# Ensure values such as:
#   DB_ROOT = "/home/ele/plc_logger/data"   # should match DATA in /etc/default/plc-logger
#   LOCAL_TZ = "America/New_York"
#   RETENTION = {
#       "total_cap_mb": 10000,   # example 10 GB
#       "chunk_max_mb": 64,
#       # "caps": {"continuous": 8000, "conditional": 1500, "onchange": 500},
#   }


# Step 7 — Updating

#   Pull latest code:
#     > cd "$(grep '^REPO=' /etc/default/plc-logger | cut -d= -f2)"
#     > git pull
#
#   If requirements changed:
#     > source "$(grep '^VENV=' /etc/default/plc-logger | cut -d= -f2)/bin/activate"
#     > pip install -r requirements.txt
#
#   Restart services:
#     > sudo systemctl restart plc-logger plc-web
#
#   Only run daemon-reload if you changed the unit files or /etc/default/plc-logger:
#     > sudo systemctl daemon-reload


# Common hiccups

# - Permission errors writing data:
#     Ensure ownership matches USERNAME in /etc/default/plc-logger:
#     > sudo chown -R ele:ele /home/ele/plc_logger
#
# - Web not reachable from other devices:
#     Set WEB_BIND=0.0.0.0:8080 in /etc/default/plc-logger and allow the port in your firewall.
#
# - Zoneinfo errors on Python 3.8:
#     Install backports.zoneinfo into the venv.
#
# - PLC connection issues:
#     Verify PLC_IP, PLC_PORT, cabling, and Modbus unit/slave ID (if used).
